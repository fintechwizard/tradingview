//@version=5
indicator(title='custom_emas', shorttitle='custom_emas', overlay=true)

//inputs
SmallEmares = input.timeframe(defval='240', title='Small EMA Time Frame', inline='one', group='Emas')
FastEmares = input.timeframe(defval='', title='Fast EMA Time Frame', inline='two', group='Emas')
SlowEmares = input.timeframe(defval='', title='Slow EMA Time Frame', inline='three', group='Emas')
LongEmares = input.timeframe(defval='', title='Long EMA Time Frame', inline='four', group='Emas')
BigEmares = input.timeframe(defval='240', title='Big EMA Time Frame', inline='five', group='Emas')

SmallEmaLen = input.int(9, minval=1, title='Small EMA Length', maxval=4000, step=1, inline='one', group='Emas')
FastEmaLen = input.int(21, minval=1, title='Fast EMA Length', maxval=4000, step=1, inline='two', group='Emas')
SlowEmaLen = input.int(50, minval=1, title='Slow EMA Length', maxval=4000, step=10, inline='three', group='Emas')
LongEmaLen = input.int(105, minval=1, title='Long EMA Length', maxval=4000, step=5, inline='four', group='Emas')
BigEmaLen = input.int(200, minval=1, title='Big EMA Length', maxval=4000, step=50, inline='five', group='Emas')

temares = input.timeframe(defval='240', title='TEMA Time Frame', inline='one', group='Tema')
temalen = input.int(21, minval=1, title='TEMA Length', maxval=4000, step=1, inline='one', group='Tema')

bol_res = input.timeframe(defval='480', title='Bollinger Bands Time Frame', inline='one', group='BBands')
bol_mult = input.float(2.25, minval=0.001, maxval=50, title="Bollinger Deviation", inline='one', group='BBands')
bol_len = input.int(21, minval=1, maxval=200, title="Bollinger Length", inline='two', group='BBands')

//logic
price_res = close

SmallEma = ta.ema(close, SmallEmaLen)
FastEma = ta.ema(close, FastEmaLen)
SlowEma = ta.ema(close, SlowEmaLen)
LongEma = ta.ema(close, LongEmaLen)
BigEma = ta.ema(close, BigEmaLen)

ema1 = ta.ema(close, temalen)
ema2 = ta.ema(ema1, temalen)
ema3 = ta.ema(ema2, temalen)
TEMA = 3 * (ema1 - ema2) + ema3

tema = request.security(syminfo.tickerid, temares, TEMA[1], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)

HtfSmallEma = request.security(syminfo.tickerid, SmallEmares, SmallEma, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
HtfFastEma = request.security(syminfo.tickerid, FastEmares, FastEma, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
HtfSlowEma = request.security(syminfo.tickerid, SlowEmares, SlowEma, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
HtfLongEma = request.security(syminfo.tickerid, LongEmares, LongEma, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
HtfBigEma = request.security(syminfo.tickerid, BigEmares, BigEma, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)

bol_basis_stf = ta.sma(close, bol_len)
bol_dev_stf = bol_mult * ta.stdev(close, bol_len)
bol_upper_stf = bol_basis_stf + bol_dev_stf
bol_lower_stf = bol_basis_stf - bol_dev_stf

bol_basis = request.security(syminfo.tickerid, bol_res, bol_basis_stf, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
bol_upper = request.security(syminfo.tickerid, bol_res, bol_upper_stf, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
bol_lower = request.security(syminfo.tickerid, bol_res, bol_lower_stf, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)

//plots
plot(HtfSmallEma, title='Small EMA', color=color.blue, linewidth=2, offset=0)
plot(HtfFastEma, title='Fast EMA', color=HtfFastEma > hl2 ? color.fuchsia : color.yellow, linewidth=1, offset=0)
plot(HtfSlowEma, title='Slow EMA', color=HtfSlowEma > hl2 ? color.aqua : color.white, linewidth=1, offset=0)
plot(HtfLongEma, title='Long EMA', color=HtfLongEma > hl2 ? color.maroon : color.green, linewidth=1, offset=0)
plot(HtfBigEma, title='Big Ema', color=color.orange, linewidth=2, offset=0)
plot(tema, title='Tema', color=#ff008c, linewidth=2, offset=0)

plot(bol_basis, "Basis", color=#ff008c, linewidth=2)
p1 = plot(bol_upper, "bol_Upper", color=#ff008c, linewidth=2)
p2 = plot(bol_lower, "bol_Lower", color=#ff008c, linewidth=2)
fill(p1, p2, title = "bol_Background", color=color.rgb(233, 58, 166, 95))
