
// Â© DrDan85

//@version=5
strategy(title='prime_lite', shorttitle='prime_lite', overlay=true, pyramiding=0, calc_on_every_tick=true, default_qty_type=strategy.cash, default_qty_value=100, initial_capital=100, currency=currency.USD, process_orders_on_close=true)

//Inputs
price_res = input.timeframe(defval='60', title='Price Resolution (live)', inline='res', group='Resolutions')
temares = input.timeframe(defval='240', title='TEMA Resolution', inline='res', group='Resolutions')
emares = input.timeframe(defval='240', title='EMA Resolution', inline='res_b', group='Resolutions')
mtf_val = input.timeframe('60', 'Regression Resolution', inline='res_b', group='Resolutions')
temalen = input.int(21, minval=1, title='TEMA Length', maxval=4000, step=1, inline='len', group='Lengths')
emalen = input.int(21, minval=1, title='EMA Length', maxval=4000, step=1, inline='len', group='Lengths')
tp_atr = input.int(3, minval=0, title='Profit ATR', maxval=10, step=1, inline='Atr', group='Price Data')
min_perc = input.int(5, minval=0, title='Profit ATR offset (%)', maxval=10, step=1, inline='Atr', group='Price Data')

//Logic
    //linear regression
data(x) =>
    ta.sma(request.security(syminfo.tickerid, mtf_val != '' ? mtf_val : timeframe.period, x), 1)
LINREG = data(ta.linreg(close, 100, 0))
linreg = data(ta.linreg(close, 100, 0))
linreg_p = data(ta.linreg(close, 100, 0 + 1))
x = bar_index
slope = linreg - linreg_p
intercept = linreg - x * slope
deviationSum = 0.0
for i = 0 to 100 - 1 by 1
    deviationSum += math.pow(close[i] - (slope * (x - i) + intercept), 2)
    deviationSum
deviation = math.sqrt(deviationSum / 100)
x1 = x - 100
x2 = x
y1 = slope * (x - 100) + intercept
y2 = linreg
var line b = na
var line dp = na
var line dm = na
updating = timestamp("20 Jul 2050 00:00 +0300") >= time
if updating
    b := line.new(x1, y1, x2, y2, xloc.bar_index, extend.right, color.aqua, width=4)
    if not false
        line.delete(b[1])
    dp := line.new(x1, deviation * 2.0 + y1, x2, deviation * 2.0 + y2, xloc.bar_index, extend.right, color.red, width=4)
    if not false
        line.delete(dp[1])
    dm := line.new(x1, -deviation * 2.0 + y1, x2, -deviation * 2.0 + y2, xloc.bar_index, extend.right, color.green, width=4)
    if not false
        line.delete(dm[1])
dm_current = -deviation * 2.0 + y2
dp_current = deviation * 2.0 + y2

    //htf price data
close_htf = request.security(syminfo.tickerid, price_res, close, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
close_htf_prev = request.security(syminfo.tickerid, price_res, close[1], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
open_htf = request.security(syminfo.tickerid, price_res, open, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
high_htf = request.security(syminfo.tickerid, price_res, high, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
low_htf = request.security(syminfo.tickerid, price_res, low, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)

    //tema
ema1 = ta.ema(close, temalen)
ema2 = ta.ema(ema1, temalen)
ema3 = ta.ema(ema2, temalen)
TEMA = 3 * (ema1 - ema2) + ema3
tema = request.security(syminfo.tickerid, temares, TEMA, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
EMA = ta.ema(close, emalen)
ema = request.security(syminfo.tickerid, emares, EMA, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)

    //width
t_midd = (tema + ema) / 2
width = (tema - ema) / t_midd
contracting = width < width[48]
expanding = width > width[48]

//Signals
positive = (tema > ema)
negative = (tema < ema)
candles_l = (open_htf < close_htf) and (close_htf_prev < close_htf)
candles_s = (open_htf > close_htf) and (close_htf_prev > close_htf)
rising = ema > ema[48]
falling = ema < ema[48]
//
trend_s = ta.crossunder(tema, ema)
trend_l = ta.crossover(tema, ema)
linear_l = ta.crossunder(close, dm_current)
linear_s = ta.crossover(close, dp_current)
//
l_1 = trend_l
l_3 = linear_l and ((positive and not contracting) or (negative and contracting))
s_1 = trend_s
s_3 = linear_s and ((negative and not contracting) or (positive and contracting))
//
condl = (l_3 or l_1) and candles_l
conds = (s_3 or s_1) and candles_s

//Price data
ATR = ta.atr(14)
atr = request.security(syminfo.tickerid, price_res, ATR, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
bought_l = strategy.position_size[0] > strategy.position_size[1]
bought_s = strategy.position_size[0] < strategy.position_size[1]
entry_high = ta.valuewhen(bought_l, high, 0)
entry_low = ta.valuewhen(bought_s, low, 0)
entry_close_l = ta.valuewhen(bought_l, close, 0)
entry_close_s = ta.valuewhen(bought_s, close, 0)
long_perc = (entry_close_l * (1 + (10 * 0.01)))
short_perc = (entry_close_s * (1 - (10 * 0.01)))
min_perc_l = (entry_close_l * (1 + (min_perc * 0.01)))
min_perc_s = (entry_close_s * (1 - (min_perc * 0.01)))
long_atr_prof = (entry_high + (tp_atr*atr))
short_atr_prof = (entry_low - (tp_atr*atr))

longtp = (long_atr_prof > min_perc_l ? long_atr_prof : min_perc_l)
shorttp = (short_atr_prof < min_perc_s ? short_atr_prof : min_perc_s)
    //stop
longstop = (entry_close_l * (1 - 5 * 0.01))
shortstop = (entry_close_s * (1 + 5 * 0.01))

//Entry
if (condl and strategy.position_size <= 0 and barstate.isconfirmed)
    strategy.entry("Long Entry", strategy.long)
if (conds and strategy.position_size >= 0 and barstate.isconfirmed)
    strategy.entry("Short Entry", strategy.short)

//Exit
if strategy.position_size > 0
    strategy.exit('Long Exit', 'Long Entry', stop=longstop, limit=longtp)
if strategy.position_size < 0
    strategy.exit('Short Exit', 'Short Entry', stop=shortstop, limit=shorttp)

//Plots
plot(series=strategy.position_size > 0?longstop:na, color=color.fuchsia, linewidth=1, style=plot.style_linebr, title='Stop Long')
plot(series=strategy.position_size < 0?shortstop:na, color=color.fuchsia, linewidth=1, style=plot.style_linebr, title='Stop Short')
plot(series=strategy.position_size > 0?longtp:na, color=color.new(color.green, 0), linewidth=1, style=plot.style_linebr, title='Profit Long')
plot(series=strategy.position_size < 0?shorttp:na, color=color.new(color.green, 0), linewidth=1, style=plot.style_linebr, title='Profit Short')
plotshape((strategy.position_size > 0) ? 1 :na, style=shape.arrowup, color=color.new(color.green, 0), location=location.bottom, title='In Long Trade', size=size.normal)
plotshape((strategy.position_size < 0)? 1 :na, style=shape.arrowdown, color=color.new(color.red, 0), location=location.top, title='In Short Trade', size=size.normal)


